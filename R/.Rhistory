library(devtools)
install_github("VincentKV/Cryptics")
library(Cryptics)
symbolCheck("BT")
install_github("VincentKV/Cryptics")
library(Cryptics)
symbolCheck("BT")
symbolCheck("BTCXYZ")
symbolCheck("BTC")
symbolCheck("BT")
symbolCheck("BTCXYZ")
cryptoCourse(symbol="TRX",currency="GBP")
options(warn=-1)
cryptoCourse(symbol="TRX",currency="GBP")
cryptoCourse()
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
cryptoCourse()
cryptoCourse(symbol="TRX",currency="GBP")
normalizedCourse(cryptoCourse(symbol="LTC",currency="EUR"))
document()
document()
historic(symbol="LTC",currency="GBP")
document()
document()
install_github("VincentKV/Cryptics")
historic(symbol="LTC",currency="GBP")
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
historic(symbol="LTC",currency="GBP")
install_github("VincentKV/Cryptics")
library(Cryptics)
historic(symbol="LTC",currency="GBP")
install_github("VincentKV/Cryptics")
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
historic(symbol="LTC",currency="GBP")
document()
install_github("VincentKV/Cryptics")
historic(symbol="LTC",currency="GBP")
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
candlesticks(symbol="LTC",currency="GBP",start="2019-09-01",end="2020-02-10")
#candlesticks(symbol="LTC",currency="GBP",start="2019-09-01",end="2020-02-10")
viewAllCryptos()
#candlesticks(symbol="LTC",currency="GBP",start="2019-09-01",end="2020-02-10")
viewAllCryptos()
invest(symbol="BTC",currency="USD",amount=20,start="2021-01-01",end="2021-04-01")
invest(symbol="LTC",currency="EUR",amount=20,start="2021-01-01",end="2021-04-01")
invest(amount=20,start="2020-01-01")
invest(amount=20,start="2020-04-01")
historic()
invest(amount=20,start="2019-02-01")
invest <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(gain)
}
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(gain)
}
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(end)
}
investo(amount=20,start="2019-02-01")
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(start)
}
investo(amount=20,start="2019-02-01")
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(ts[end][[1]])
}
investo(amount=20,start="2019-02-01")
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(ts[start][[1]])
}
investo(amount=20,start="2019-02-01")
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]-ts[start][[1]]
gain=amount*(1+evolDx)
return(evolDx)
}
investo(amount=20,start="2019-02-01")
investo <- function(symbol="BTC",currency="USD",amount,start,end=as.Date(Sys.Date())){
course=cryptoCourse(symbol,currency)
start=as.Date(start)
end=as.Date(end)
ts=normalizedCourse(course)
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(course)[length(course$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
evolDx=ts[end][[1]]/ts[start][[1]]
gain=amount*evolDx
return(gain)
}
investo(amount=20,start="2019-02-01")
document()
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
invest(amount=20,start="2019-02-01")
invest(amount=20,start="2019-02-01")
install_github("VincentKV/Cryptics")
library(Cryptics)
invest(amount=20,start="2019-02-01")
document()
invest(amount=20,start="2019-02-01")
invest(symbol="LTC",amount=20,start="2021-01-01",end="2021-04-01")
invest(symbol="LTC",amount=20,start="2021-01-01",end="2021-04-01")
historic(symbol="LTC",currency="GBP")
historic(symbol="LTC",currency="USD")
historic(symbol="LTC",currency="EUR")
historic(symbol="LTC",currency="GBP")
historic(symbol="LTC",currency="USD")
document()
my_wallet=wallet(symbol="LTC",currency="USD",amount=20,start="2021-01-01",end="2021-04-01")
my_portfolio=portfolio(list(wallet(symbol = "TRX",amount = 20,start = "2021-01-01"),
wallet(symbol = "BTC",amount = 30,start = "2020-07-01",end = "2021-02-01"),
wallet(symbol = "LTC",amount = 25,start = "2021-03-01")))
cointrack(my_portfolio)
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
#if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-1)#on décale au jour précédent
#}
#if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-2)#on décale au jour précédent
#}
return(time(ts)[length(ts)])
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
#if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-1)#on décale au jour précédent
#}
#if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-2)#on décale au jour précédent
#}
return(time(ts))
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
#if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-1)#on décale au jour précédent
#}
#if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-2)#on décale au jour précédent
#}
return(length(ts))
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
#if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts)]){
#  end=as.Date(Sys.Date()-1)#on décale au jour précédent
#}
#if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts$Open)]){
#  end=as.Date(Sys.Date()-2)#on décale au jour précédent
#}
return(length(ts$Open))
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
start=as.Date(start)
end=as.Date(end)
ts=cryptoCourse(symbol,currency)#a double time-series
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)#on retransforme en time series
# Plot it
p <- dygraph(data) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
candlesticks()
candlesticks(start="2019-01-01")
candlesticks(start="2021-01-01")
candlesticks(start="2021-02-01")
candlesticks()
document()
candlesticks(start="2021-02-01")
candlesticks <- function(symbol="BTC",currency="USD",start=Sys.Date()-30,end=Sys.Date()){
options(warn=-1)
start=as.Date(start)
end=as.Date(end)
title=paste("Normalized",symbol,"candlestick chart",sep=" ")
ts=cryptoCourse(symbol,currency)#a double time-series
if(end==as.Date(Sys.Date()) && as.Date(Sys.Date())!=time(ts)[length(ts$Open)]){
end=as.Date(Sys.Date()-1)#on décale au jour précédent
}
if(end==as.Date(Sys.Date()-1) && as.Date(Sys.Date()-1)!=time(ts)[length(ts$Open)]){
end=as.Date(Sys.Date()-2)#on décale au jour précédent
}
#conversion de la time series en dataframe
data <- data.frame(
Date=seq(from=start, to=end, by=1 ),
Open=ts$Open[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
High=ts$High[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Low=ts$Low[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE),
Close=ts$Close[which(time(ts)==start):which(time(ts)==end)]/max(ts$High,na.rm = TRUE)
)
data <- xts(x = data[,-1], order.by = data$Date)
# Plot it
p <- dygraph(data,
main=title) %>%
dyCandlestick() %>%
dyRangeSelector()
p
}
document()
install_github("VincentKV/Cryptics")
install_github("VincentKV/Cryptics")
document()
install_github("VincentKV/Cryptics")
library(Cryptics)
candlesticks()
candlesticks(start="2021-02-01")
